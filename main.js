/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SommairePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  // Définissez les valeurs par défaut de vos paramètres ici si nécessaire.
};
var SommairePlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("dice", "Faire un sommaire", () => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (activeView) {
        const editor = activeView.editor;
        const sommaireText = this.generateSommaire(editor);
        if (sommaireText) {
          const currentText = editor.getValue();
          const insertionIndex = currentText.indexOf("---", currentText.indexOf("---") + 3);
          if (insertionIndex !== -1) {
            const updatedText = currentText.slice(0, insertionIndex + 4) + sommaireText + "\n" + currentText.slice(insertionIndex + 3);
            editor.setValue(updatedText);
          } else {
            editor.replaceRange(sommaireText, { line: 0, ch: 0 });
          }
        } else {
          new import_obsidian.Notice("Aucun titre de niveau 1 trouv\xE9 dans le document.");
        }
      } else {
        new import_obsidian.Notice("Aucun \xE9diteur Markdown ouvert.");
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // Méthode pour vérifier la présence d'un titre de niveau 1.
  hasTitle1(editor) {
    const lines = editor.getValue().split("\n");
    for (const line of lines) {
      if (line.trim().startsWith("# ")) {
        return true;
      }
    }
    return false;
  }
  // Méthode pour obtenir le texte du titre de niveau 1.
  getTitleText(editor) {
    const lines = editor.getValue().split("\n");
    for (const line of lines) {
      const trimmedLine = line.trim();
      if (trimmedLine.startsWith("# ") && trimmedLine.length > 2) {
        return trimmedLine.slice(2);
      }
    }
    return null;
  }
  generateSommaire(editor) {
    const lines = editor.getValue().split("\n");
    const sommaire = [];
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line.startsWith("# ") && line.length > 2 && !line.startsWith("# [")) {
        const titleText = line.slice(2);
        const escapedTitleText = encodeURIComponent(titleText);
        sommaire.push(`# [${titleText}](#${escapedTitleText})
`);
      }
      if (line.startsWith("## ") && line.length > 3 && !line.startsWith("## [")) {
        const titleText = line.slice(3);
        const escapedTitleText = encodeURIComponent(titleText);
        sommaire.push(`## [${titleText}](##${escapedTitleText})
`);
      }
      if (line.startsWith("### ") && line.length > 4 && !line.startsWith("### [")) {
        const titleText = line.slice(4);
        const escapedTitleText = encodeURIComponent(titleText);
        sommaire.push(`### [${titleText}](###${escapedTitleText})
`);
      }
      if (line.startsWith("#### ") && line.length > 3 && !line.startsWith("#### [")) {
        const titleText = line.slice(5);
        const escapedTitleText = encodeURIComponent(titleText);
        sommaire.push(`#### [${titleText}](####${escapedTitleText})
`);
      }
      if (line.startsWith("##### ") && line.length > 3 && !line.startsWith("##### [")) {
        const titleText = line.slice(6);
        const escapedTitleText = encodeURIComponent(titleText);
        sommaire.push(`##### [${titleText}](#####${escapedTitleText})
`);
      }
      if (line.startsWith("###### ") && line.length > 3 && !line.startsWith("###### [")) {
        const titleText = line.slice(7);
        const escapedTitleText = encodeURIComponent(titleText);
        sommaire.push(`###### [${titleText}](######${escapedTitleText})
`);
      }
    }
    if (sommaire.length > 0) {
      return sommaire.join("\n");
    } else {
      console.log("Aucun titre de niveau 1 trouv\xE9 dans le document.");
    }
    return null;
  }
};
//# sourceMappingURL=data:application/json;base64,
